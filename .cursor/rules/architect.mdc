---
globs: *.ts,*.tsx,*.js,*.jsx
description: "Regras para Architect com integra√ß√£o ClickUp MCP Server"
---

# Architect - ClickUp MCP Integration

## Uso Obrigat√≥rio do ClickUp MCP Server

### Cria√ß√£o de Tasks de Arquitetura
```typescript
// ‚úÖ SEMPRE criar task de arquitetura no ClickUp
async function createArchitectureTask(taskData: {
  name: string;
  description: string;
  technicalSpecs: string;
  architectureDecisions: string[];
  priority: number;
  dueDate: string;
  assignees?: string[];
  dependencies?: string[];
}) {
  const task = await mcp_clickup-mcp-server_create_task({
    name: `üèóÔ∏è ${taskData.name}`,
    description: `## Descri√ß√£o\n${taskData.description}\n\n## Especifica√ß√µes T√©cnicas\n${taskData.technicalSpecs}\n\n## Decis√µes de Arquitetura\n${taskData.architectureDecisions.map(decision => `- ${decision}`).join('\n')}`,
    listName: "Technical Docs",
    priority: taskData.priority,
    dueDate: taskData.dueDate,
    assignees: taskData.assignees,
    dependencies: taskData.dependencies,
    tags: ["architecture", "technical", "design"]
  });
  
  return task;
}

// ‚úÖ SEMPRE criar subtasks t√©cnicas
async function createTechnicalSubtasks(parentTaskId: string, subtasks: {
  name: string;
  description: string;
  technicalDetails: string;
  estimatedHours: number;
  dependencies?: string[];
}[]) {
  const createdSubtasks = [];
  
  for (const subtask of subtasks) {
    const dueDate = new Date(Date.now() + subtask.estimatedHours * 60 * 60 * 1000).toISOString();
    
    const created = await mcp_clickup-mcp-server_create_task({
      name: `üîß ${subtask.name}`,
      description: `## Descri√ß√£o\n${subtask.description}\n\n## Detalhes T√©cnicos\n${subtask.technicalDetails}\n\n## Estimativa\n${subtask.estimatedHours} horas`,
      parent: parentTaskId,
      listName: "Technical Docs",
      priority: 3,
      dueDate,
      dependencies: subtask.dependencies,
      tags: ["subtask", "technical", "implementation"]
    });
    
    createdSubtasks.push(created);
  }
  
  return createdSubtasks;
}
```

### Gest√£o de Decis√µes de Arquitetura
```typescript
// ‚úÖ SEMPRE criar ADR (Architecture Decision Record)
async function createADR(adrData: {
  title: string;
  status: 'proposed' | 'accepted' | 'deprecated' | 'superseded';
  context: string;
  decision: string;
  consequences: string[];
  priority: number;
  dueDate: string;
  assignees?: string[];
}) {
  const adr = await mcp_clickup-mcp-server_create_task({
    name: `üìã ADR: ${adrData.title}`,
    description: `## Status\n${adrData.status}\n\n## Contexto\n${adrData.context}\n\n## Decis√£o\n${adrData.decision}\n\n## Consequ√™ncias\n${adrData.consequences.map(consequence => `- ${consequence}`).join('\n')}`,
    listName: "Technical Docs",
    priority: adrData.priority,
    dueDate: adrData.dueDate,
    assignees: adrData.assignees,
    tags: ["adr", "architecture", "decision"]
  });
  
  return adr;
}

// ‚úÖ SEMPRE criar task de refatora√ß√£o
async function createRefactoringTask(refactoringData: {
  name: string;
  description: string;
  currentArchitecture: string;
  targetArchitecture: string;
  migrationPlan: string[];
  priority: number;
  dueDate: string;
  assignees?: string[];
}) {
  const task = await mcp_clickup-mcp-server_create_task({
    name: `üîÑ Refatora√ß√£o: ${refactoringData.name}`,
    description: `## Descri√ß√£o\n${refactoringData.description}\n\n## Arquitetura Atual\n${refactoringData.currentArchitecture}\n\n## Arquitetura Alvo\n${refactoringData.targetArchitecture}\n\n## Plano de Migra√ß√£o\n${refactoringData.migrationPlan.map(step => `1. ${step}`).join('\n')}`,
    listName: "Technical Docs",
    priority: refactoringData.priority,
    dueDate: refactoringData.dueDate,
    assignees: refactoringData.assignees,
    tags: ["refactoring", "architecture", "migration"]
  });
  
  return task;
}
```

### Documenta√ß√£o T√©cnica
```typescript
// ‚úÖ SEMPRE criar documenta√ß√£o de arquitetura no ClickUp
async function createArchitectureDocument(documentData: {
  name: string;
  content: string;
  type: 'architecture' | 'api-spec' | 'system-design' | 'technical-requirements';
}) {
  const document = await mcp_clickup-mcp-server_create_document({
    name: `üèóÔ∏è ${documentData.type.toUpperCase()}: ${documentData.name}`,
    parent: { id: "901413034981", type: 6 },
    visibility: "PRIVATE",
    create_page: true
  });
  
  // Atualizar conte√∫do
  const pages = await mcp_clickup-mcp-server_list_document_pages({
    documentId: document.id
  });
  
  if (pages.pages?.[0]) {
    await mcp_clickup-mcp-server_update_document_page({
      documentId: document.id,
      pageId: pages.pages[0].id,
      content: documentData.content,
      content_format: "text/md",
      content_edit_mode: "replace"
    });
  }
  
  return document;
}
```

### Gest√£o de Depend√™ncias
```typescript
// ‚úÖ SEMPRE criar task de depend√™ncia
async function createDependencyTask(dependencyData: {
  name: string;
  description: string;
  dependencyType: 'internal' | 'external' | 'third-party';
  impact: string;
  priority: number;
  dueDate: string;
  assignees?: string[];
}) {
  const task = await mcp_clickup-mcp-server_create_task({
    name: `üîó Depend√™ncia: ${dependencyData.name}`,
    description: `## Descri√ß√£o\n${dependencyData.description}\n\n## Tipo de Depend√™ncia\n${dependencyData.dependencyType}\n\n## Impacto\n${dependencyData.impact}`,
    listName: "Technical Docs",
    priority: dependencyData.priority,
    dueDate: dependencyData.dueDate,
    assignees: dependencyData.assignees,
    tags: ["dependency", "technical", dependencyData.dependencyType]
  });
  
  return task;
}
```

## Campos Obrigat√≥rios ClickUp

### Architecture Task Fields
- **name**: T√≠tulo t√©cnico com √≠cone
- **description**: Descri√ß√£o detalhada em markdown
- **listName**: "Technical Docs"
- **priority**: 1=Urgent, 2=High, 3=Normal, 4=Low
- **dueDate**: Data de vencimento baseada na complexidade
- **assignees**: Array de IDs de arquitetos/desenvolvedores
- **dependencies**: Array de IDs de tasks dependentes
- **tags**: Array de tags t√©cnicas

### ADR Fields
- **name**: T√≠tulo do ADR com √≠cone
- **description**: ADR completo em markdown
- **listName**: "Technical Docs"
- **priority**: Baseada na criticidade da decis√£o
- **dueDate**: Data de vencimento do ADR
- **dependencies**: Array de IDs de ADRs dependentes
- **tags**: Array de tags de arquitetura

### Document Fields
- **name**: Nome t√©cnico com √≠cone e tipo
- **parent**: Technical Docs List
- **visibility**: "PRIVATE" para documenta√ß√£o interna
- **content**: Conte√∫do t√©cnico em markdown

## Exemplos de Uso

### Criar Task de Arquitetura
```typescript
await createArchitectureTask({
  name: "Sistema de Autentica√ß√£o JWT",
  description: "Projetar arquitetura para sistema de autentica√ß√£o usando JWT",
  technicalSpecs: "JWT com refresh tokens, middleware de valida√ß√£o, integra√ß√£o com Supabase Auth",
  architectureDecisions: [
    "Usar JWT para stateless authentication",
    "Implementar refresh token para seguran√ßa",
    "Middleware centralizado para valida√ß√£o"
  ],
  priority: 1,
  dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
  assignees: ["arch123"]
});
```

### Criar ADR
```typescript
await createADR({
  title: "JWT vs Session-based Authentication",
  status: 'accepted',
  context: "Necessidade de autentica√ß√£o stateless para API",
  decision: "Usar JWT com refresh tokens",
  consequences: [
    "Melhor escalabilidade",
    "Redu√ß√£o de depend√™ncia do servidor",
    "Maior complexidade na implementa√ß√£o"
  ],
  priority: 1,
  dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
  assignees: ["arch123"]
});
```

### Criar Documenta√ß√£o de Arquitetura
```typescript
await createArchitectureDocument({
  name: "Sistema de Autentica√ß√£o - Arquitetura",
  content: "# Arquitetura do Sistema de Autentica√ß√£o\n\n## Vis√£o Geral\n...",
  type: 'architecture'
});
```

---

**Lembre-se**: Como Architect, sempre use ClickUp MCP para criar tasks de arquitetura, ADRs e documenta√ß√£o t√©cnica com foco na qualidade e consist√™ncia!