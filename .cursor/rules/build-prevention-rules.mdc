# Regras de Preven√ß√£o de Erros de Build - FalaChefe v4

## üö® PREVEN√á√ÉO DE ERROS CR√çTICOS

### 1. SUPABASE EDGE RUNTIME COMPATIBILITY

**PROBLEMA:** APIs do Node.js (process.versions, process.version) n√£o suportadas no Edge Runtime
**PREVEN√á√ÉO:**

- SEMPRE manter `next.config.ts` com configura√ß√£o para for√ßar Node.js runtime para Supabase
- NUNCA usar Supabase diretamente em API routes sem especificar runtime
- SEMPRE verificar se fun√ß√µes que usam Supabase est√£o configuradas corretamente
- ANTES de fazer deploy, verificar se n√£o h√° warnings de Edge Runtime no build

```typescript
// SEMPRE manter esta configura√ß√£o no next.config.ts
const nextConfig: NextConfig = {
  serverExternalPackages: ["@supabase/ssr", "@supabase/supabase-js"],
  experimental: {
    serverComponentsExternalPackages: [
      "@supabase/ssr",
      "@supabase/supabase-js",
    ],
  },
  webpack: (config, { isServer }) => {
    if (isServer) {
      config.externals = config.externals || [];
      config.externals.push({
        "@supabase/realtime-js": "commonjs @supabase/realtime-js",
        "@supabase/supabase-js": "commonjs @supabase/supabase-js",
      });
    }
    return config;
  },
};
```

### 2. VARI√ÅVEIS N√ÉO UTILIZADAS (ESLint)

**PROBLEMA:** Par√¢metros definidos mas n√£o utilizados causam warnings no build
**PREVEN√á√ÉO:**

- NUNCA deixar par√¢metros n√£o utilizados com underscore (\_param) sem uso real
- SEMPRE usar par√¢metros ou remov√™-los completamente
- PREFERIR adicionar console.log tempor√°rio que usa o par√¢metro
- ANTES de commit, SEMPRE executar `pnpm run lint` e `pnpm run typecheck`

**EXEMPLOS DE CORRE√á√ÉO:**

```typescript
// ‚ùå ERRADO - par√¢metro n√£o utilizado
async retrieve(_text: string): Promise<Array<{ content: string; score: number }>> {
  return [];
}

// ‚úÖ CORRETO - par√¢metro utilizado
async retrieve(text: string): Promise<Array<{ content: string; score: number }>> {
  console.log("Busca RAG b√°sica para:", text);
  return [];
}

// ‚úÖ ALTERNATIVA - remover par√¢metro se n√£o necess√°rio
async retrieve(): Promise<Array<{ content: string; score: number }>> {
  return [];
}
```

### 3. BUILD E DEPLOY VALIDATION

**PROBLEMA:** Deploy com warnings/erros quebram a aplica√ß√£o
**PREVEN√á√ÉO:**

- SEMPRE executar `pnpm run lint` antes de commit
- SEMPRE executar `pnpm run typecheck` antes de commit
- NUNCA fazer push com warnings de ESLint
- SEMPRE verificar se o build local est√° limpo antes do deploy

## üìã CHECKLIST OBRIGAT√ìRIO ANTES DE CADA COMMIT

### ‚úÖ Valida√ß√£o de C√≥digo

- [ ] `pnpm run lint` - SEM warnings ou erros
- [ ] `pnpm run typecheck` - SEM erros de tipos
- [ ] `pnpm run build` - Build local bem-sucedido

### ‚úÖ Valida√ß√£o de Supabase

- [ ] Configura√ß√£o do `next.config.ts` mantida
- [ ] Nenhuma fun√ß√£o usando Supabase sem runtime especificado
- [ ] Vari√°veis de ambiente do Supabase configuradas

### ‚úÖ Valida√ß√£o de Vari√°veis

- [ ] Nenhuma vari√°vel n√£o utilizada com underscore
- [ ] Par√¢metros de fun√ß√£o todos utilizados ou removidos
- [ ] Imports n√£o utilizados removidos

## üõ†Ô∏è CONFIGURA√á√ïES T√âCNICAS OBRIGAT√ìRIAS

### ESLint Configuration

```json
{
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "no-console": "warn"
  }
}
```

### Package.json Scripts

```json
{
  "scripts": {
    "lint": "next lint",
    "typecheck": "tsc --noEmit",
    "build": "next build",
    "pre-commit": "pnpm run lint && pnpm run typecheck"
  }
}
```

## üöÄ WORKFLOW DE DESENVOLVIMENTO

### 1. Antes de Come√ßar a Codificar

- Verificar se `next.config.ts` est√° correto
- Executar `pnpm run lint` para baseline limpo

### 2. Durante o Desenvolvimento

- NUNCA deixar vari√°veis n√£o utilizadas
- SEMPRE usar par√¢metros de fun√ß√£o ou remov√™-los
- SEMPRE testar build local antes de commit

### 3. Antes do Commit

- Executar checklist obrigat√≥rio
- Corrigir TODOS os warnings/erros
- Fazer commit apenas com c√≥digo limpo

### 4. Antes do Deploy

- Verificar build local
- Confirmar que n√£o h√° warnings no log
- Testar funcionalidades cr√≠ticas

## üîß FERRAMENTAS DE PREVEN√á√ÉO

### Pre-commit Hook (Recomendado)

```bash
#!/bin/sh
pnpm run lint
pnpm run typecheck
if [ $? -ne 0 ]; then
  echo "‚ùå Commit rejeitado: erros de lint ou typecheck"
  exit 1
fi
echo "‚úÖ C√≥digo validado com sucesso"
```

### VS Code Settings

```json
{
  "typescript.preferences.includePackageJsonAutoImports": "auto",
  "eslint.validate": ["typescript", "typescriptreact"],
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  }
}
```

## üìö PADR√ïES DE C√ìDIGO

### Fun√ß√µes com Par√¢metros N√£o Utilizados

```typescript
// ‚úÖ PADR√ÉO CORRETO - Sempre usar ou remover
async function processData(data: string, options?: ProcessOptions) {
  console.log("Processando dados:", data);
  if (options) {
    console.log("Op√ß√µes:", options);
  }
  // ... implementa√ß√£o
}

// ‚ùå EVITAR - Par√¢metros n√£o utilizados
async function processData(data: string, _options?: ProcessOptions) {
  // _options n√£o √© usado
}
```

### Configura√ß√£o de Runtime

```typescript
// ‚úÖ PADR√ÉO CORRETO - Especificar runtime quando necess√°rio
export const runtime = "nodejs"; // Para APIs que usam Supabase

// ‚úÖ PADR√ÉO CORRETO - Edge runtime para fun√ß√µes simples
export const runtime = "edge";
```

## üö® ALERTAS DE SEGURAN√áA

### NUNCA Fazer

- Commit com warnings de ESLint
- Deploy sem executar build local
- Usar Supabase em Edge Runtime sem configura√ß√£o adequada
- Deixar vari√°veis n√£o utilizadas em produ√ß√£o

### SEMPRE Fazer

- Executar valida√ß√µes antes de commit
- Manter configura√ß√µes do Next.js atualizadas
- Usar par√¢metros de fun√ß√£o adequadamente
- Testar build local antes de deploy

## üìû SUPORTE E ESCALA√á√ÉO

### Se Encontrar Problemas

1. Verificar se `next.config.ts` est√° correto
2. Executar `pnpm run lint` e corrigir warnings
3. Executar `pnpm run typecheck` e corrigir erros
4. Testar build local com `pnpm run build`
5. Se persistir, revisar configura√ß√µes do Supabase

### Logs de Debug

```typescript
// ‚úÖ PADR√ÉO - Usar console.log para debug tempor√°rio
console.log("Debug info:", { param1, param2 });

// ‚ùå EVITAR - Deixar logs de debug em produ√ß√£o
console.log("Debug:", variable); // Sempre remover antes do commit
```

---

**√öltima atualiza√ß√£o:** $(date)
**Vers√£o:** 1.0
**Aplic√°vel a:** FalaChefe v4 - Projeto de Chat com Agent Squad
