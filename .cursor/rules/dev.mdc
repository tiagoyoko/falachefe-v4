---
alwaysApply: true
description: "Regras para Developer com integra√ß√£o ClickUp MCP Server"
---

# Developer - ClickUp MCP Integration

## Uso Obrigat√≥rio do ClickUp MCP Server

### Cria√ß√£o de Tasks de Desenvolvimento
```typescript
// ‚úÖ SEMPRE criar task de desenvolvimento no ClickUp
async function createDevelopmentTask(taskData: {
  name: string;
  description: string;
  technicalDetails: string;
  priority: number;
  dueDate: string;
  assignees?: string[];
  storyId?: string;
  dependencies?: string[];
}) {
  const task = await mcp_clickup-mcp-server_create_task({
    name: `üíª ${taskData.name}`,
    description: `## Descri√ß√£o\n${taskData.description}\n\n## Detalhes T√©cnicos\n${taskData.technicalDetails}`,
    listName: "Sprint Backlog",
    priority: taskData.priority,
    dueDate: taskData.dueDate,
    assignees: taskData.assignees,
    dependencies: taskData.dependencies,
    tags: ["development", "coding"]
  });
  
  // Se vinculado a uma story, criar coment√°rio
  if (taskData.storyId) {
    await mcp_clickup-mcp-server_create_task_comment({
      taskId: task.id,
      commentText: `Vinculado √† story: ${taskData.storyId}`
    });
  }
  
  return task;
}

// ‚úÖ SEMPRE criar subtasks t√©cnicas
async function createTechnicalSubtasks(parentTaskId: string, subtasks: {
  name: string;
  description: string;
  estimatedHours: number;
  dependencies?: string[];
}[]) {
  const createdSubtasks = [];
  
  for (const subtask of subtasks) {
    const dueDate = new Date(Date.now() + subtask.estimatedHours * 60 * 60 * 1000).toISOString();
    
    const created = await mcp_clickup-mcp-server_create_task({
      name: `üîß ${subtask.name}`,
      description: `## Descri√ß√£o\n${subtask.description}\n\n## Estimativa\n${subtask.estimatedHours} horas`,
      parent: parentTaskId,
      listName: "Sprint Backlog",
      priority: 3,
      dueDate,
      dependencies: subtask.dependencies,
      tags: ["subtask", "technical"]
    });
    
    createdSubtasks.push(created);
  }
  
  return createdSubtasks;
}
```

### Gest√£o de Bugs e Issues
```typescript
// ‚úÖ SEMPRE criar bug report no ClickUp
async function createBugReport(bugData: {
  title: string;
  description: string;
  stepsToReproduce: string[];
  expectedBehavior: string;
  actualBehavior: string;
  priority: number;
  severity: 'low' | 'medium' | 'high' | 'critical';
}) {
  const bug = await mcp_clickup-mcp-server_create_task({
    name: `üêõ ${bugData.title}`,
    description: `## Descri√ß√£o\n${bugData.description}\n\n## Passos para Reproduzir\n${bugData.stepsToReproduce.map(step => `1. ${step}`).join('\n')}\n\n## Comportamento Esperado\n${bugData.expectedBehavior}\n\n## Comportamento Atual\n${bugData.actualBehavior}`,
    listName: "Bugs & Issues",
    priority: bugData.priority,
    dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
    tags: ["bug", bugData.severity]
  });
  
  return bug;
}

// ‚úÖ SEMPRE atualizar status de desenvolvimento
async function updateDevelopmentStatus(taskName: string, status: string, notes?: string) {
  const update = await mcp_clickup-mcp-server_update_task({
    taskName,
    status
  });
  
  if (notes) {
    await mcp_clickup-mcp-server_create_task_comment({
      taskId: update.id,
      commentText: `**Status Update**: ${status}\n\n${notes}`
    });
  }
  
  return update;
}
```

### Documenta√ß√£o T√©cnica
```typescript
// ‚úÖ SEMPRE criar documenta√ß√£o t√©cnica no ClickUp
async function createTechnicalDocument(documentData: {
  name: string;
  content: string;
  type: 'api' | 'architecture' | 'implementation' | 'testing';
}) {
  const document = await mcp_clickup-mcp-server_create_document({
    name: `üîß ${documentData.type.toUpperCase()}: ${documentData.name}`,
    parent: { id: "901413034981", type: 6 },
    visibility: "PRIVATE",
    create_page: true
  });
  
  // Atualizar conte√∫do
  const pages = await mcp_clickup-mcp-server_list_document_pages({
    documentId: document.id
  });
  
  if (pages.pages?.[0]) {
    await mcp_clickup-mcp-server_update_document_page({
      documentId: document.id,
      pageId: pages.pages[0].id,
      content: documentData.content,
      content_format: "text/md",
      content_edit_mode: "replace"
    });
  }
  
  return document;
}
```

### Time Tracking
```typescript
// ‚úÖ SEMPRE iniciar tracking de tempo
async function startTimeTracking(taskName: string, description?: string) {
  return await mcp_clickup-mcp-server_start_time_tracking({
    taskName,
    description: description || `Desenvolvimento: ${taskName}`
  });
}

// ‚úÖ SEMPRE parar tracking de tempo
async function stopTimeTracking(description?: string) {
  return await mcp_clickup-mcp-server_stop_time_tracking({
    description: description || `Conclu√≠do em ${new Date().toISOString()}`
  });
}
```

## Campos Obrigat√≥rios ClickUp

### Task Fields
- **name**: T√≠tulo t√©cnico com √≠cone
- **description**: Descri√ß√£o detalhada em markdown
- **listName**: Lista apropriada (Sprint Backlog, Bugs & Issues)
- **priority**: 1=Urgent, 2=High, 3=Normal, 4=Low
- **dueDate**: Data de vencimento baseada na estimativa
- **assignees**: Array de IDs de desenvolvedores
- **dependencies**: Array de IDs de tasks dependentes
- **tags**: Array de tags t√©cnicas

### Document Fields
- **name**: Nome t√©cnico com √≠cone e tipo
- **parent**: Technical Docs List
- **visibility**: "PRIVATE" para documenta√ß√£o interna
- **content**: Conte√∫do t√©cnico em markdown

## Exemplos de Uso

### Criar Task de Desenvolvimento
```typescript
await createDevelopmentTask({
  name: "Implementar autentica√ß√£o JWT",
  description: "Criar sistema de autentica√ß√£o usando JWT",
  technicalDetails: "Usar jsonwebtoken, configurar middleware, implementar refresh tokens",
  priority: 2,
  dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
  assignees: ["dev123"],
  storyId: "story-456",
  dependencies: ["task-123", "task-456"] // IDs das tasks dependentes
});
```

### Criar Bug Report
```typescript
await createBugReport({
  title: "Login n√£o funciona com email inv√°lido",
  description: "Sistema n√£o valida formato de email corretamente",
  stepsToReproduce: [
    "Acessar p√°gina de login",
    "Inserir email inv√°lido (ex: 'teste@')",
    "Clicar em entrar"
  ],
  expectedBehavior: "Sistema deve mostrar erro de email inv√°lido",
  actualBehavior: "Sistema aceita email e tenta fazer login",
  priority: 1,
  severity: 'high'
});
```

### Criar Documenta√ß√£o T√©cnica
```typescript
await createTechnicalDocument({
  name: "API Authentication Endpoints",
  content: "# API Authentication\n\n## Endpoints\n- POST /api/auth/login\n- POST /api/auth/register\n- POST /api/auth/refresh",
  type: 'api'
});
```

---

**Lembre-se**: Como Developer, sempre use ClickUp MCP para criar tasks t√©cnicas, reportar bugs e documentar implementa√ß√µes!