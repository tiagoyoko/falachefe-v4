---
globs: *.ts,*.tsx,*.js,*.jsx
description: "Regras para Product Owner com integra√ß√£o ClickUp MCP Server"
---

# Product Owner - ClickUp MCP Integration

## Uso Obrigat√≥rio do ClickUp MCP Server

### Cria√ß√£o de Epics
```typescript
// ‚úÖ SEMPRE criar epic no ClickUp
async function createEpicInClickUp(epicData: {
  name: string;
  description: string;
  businessValue: string;
  acceptanceCriteria: string[];
  priority: number;
  dueDate: string;
  assignees?: string[];
  dependencies?: string[];
}) {
  const epic = await mcp_clickup-mcp-server_create_task({
    name: `üéØ Epic: ${epicData.name}`,
    description: `## Descri√ß√£o\n${epicData.description}\n\n## Valor de Neg√≥cio\n${epicData.businessValue}\n\n## Crit√©rios de Aceita√ß√£o\n${epicData.acceptanceCriteria.map(ac => `- ${ac}`).join('\n')}`,
    listName: "Epic Backlog",
    priority: epicData.priority,
    dueDate: epicData.dueDate,
    assignees: epicData.assignees,
    dependencies: epicData.dependencies,
    tags: ["epic", "product", "business"]
  });
  
  return epic;
}

// ‚úÖ SEMPRE criar stories vinculadas ao epic
async function createStoriesForEpic(epicId: string, stories: {
  name: string;
  description: string;
  userStory: string;
  acceptanceCriteria: string[];
  priority: number;
  dueDate: string;
  dependencies?: string[];
}[]) {
  const createdStories = [];
  
  for (const story of stories) {
    const created = await mcp_clickup-mcp-server_create_task({
      name: `üìñ ${story.name}`,
      description: `## User Story\n${story.userStory}\n\n## Descri√ß√£o\n${story.description}\n\n## Crit√©rios de Aceita√ß√£o\n${story.acceptanceCriteria.map(ac => `- ${ac}`).join('\n')}`,
      parent: epicId,
      listName: "Stories",
      priority: story.priority,
      dueDate: story.dueDate,
      dependencies: story.dependencies,
      tags: ["story", "user-story", "epic"]
    });
    
    createdStories.push(created);
  }
  
  return createdStories;
}
```

### Gest√£o de Backlog
```typescript
// ‚úÖ SEMPRE priorizar items no backlog
async function prioritizeBacklogItem(taskName: string, newPriority: number, reason: string) {
  const update = await mcp_clickup-mcp-server_update_task({
    taskName,
    priority: newPriority
  });
  
  // Adicionar coment√°rio explicando a prioriza√ß√£o
  await mcp_clickup-mcp-server_create_task_comment({
    taskId: update.id,
    commentText: `**Prioriza√ß√£o Atualizada**: ${newPriority}\n\n**Motivo**: ${reason}`
  });
  
  return update;
}

// ‚úÖ SEMPRE atualizar status de stories
async function updateStoryStatus(storyName: string, status: string, businessNotes?: string) {
  const update = await mcp_clickup-mcp-server_update_task({
    taskName: storyName,
    status
  });
  
  if (businessNotes) {
    await mcp_clickup-mcp-server_create_task_comment({
      taskId: update.id,
      commentText: `**Status Update**: ${status}\n\n**Notas de Neg√≥cio**: ${businessNotes}`
    });
  }
  
  return update;
}
```

### Documenta√ß√£o de Produto
```typescript
// ‚úÖ SEMPRE criar documenta√ß√£o de produto no ClickUp
async function createProductDocument(documentData: {
  name: string;
  content: string;
  type: 'prd' | 'user-guide' | 'business-requirements' | 'acceptance-criteria';
}) {
  const document = await mcp_clickup-mcp-server_create_document({
    name: `üìä ${documentData.type.toUpperCase()}: ${documentData.name}`,
    parent: { id: "901413034981", type: 6 },
    visibility: "PRIVATE",
    create_page: true
  });
  
  // Atualizar conte√∫do
  const pages = await mcp_clickup-mcp-server_list_document_pages({
    documentId: document.id
  });
  
  if (pages.pages?.[0]) {
    await mcp_clickup-mcp-server_update_document_page({
      documentId: document.id,
      pageId: pages.pages[0].id,
      content: documentData.content,
      content_format: "text/md",
      content_edit_mode: "replace"
    });
  }
  
  return document;
}
```

### Gest√£o de Stakeholders
```typescript
// ‚úÖ SEMPRE criar task para stakeholder
async function createStakeholderTask(stakeholderData: {
  name: string;
  description: string;
  stakeholder: string;
  priority: number;
  dueDate: string;
  assignees?: string[];
}) {
  const task = await mcp_clickup-mcp-server_create_task({
    name: `üë• ${stakeholderData.name}`,
    description: `## Descri√ß√£o\n${stakeholderData.description}\n\n## Stakeholder\n${stakeholderData.stakeholder}`,
    listName: "Features & Epics",
    priority: stakeholderData.priority,
    dueDate: stakeholderData.dueDate,
    assignees: stakeholderData.assignees,
    tags: ["stakeholder", "business"]
  });
  
  return task;
}
```

## Campos Obrigat√≥rios ClickUp

### Epic Fields
- **name**: T√≠tulo do epic com √≠cone
- **description**: Descri√ß√£o completa em markdown
- **listName**: "Epic Backlog"
- **priority**: 1=Urgent, 2=High, 3=Normal, 4=Low
- **dueDate**: Data de vencimento do epic
- **assignees**: Array de IDs de stakeholders
- **dependencies**: Array de IDs de epics dependentes
- **tags**: Array de tags de neg√≥cio

### Story Fields
- **name**: T√≠tulo da story com √≠cone
- **description**: User story completa em markdown
- **parent**: ID do epic pai
- **listName**: "Stories"
- **priority**: Prioridade baseada no valor de neg√≥cio
- **dueDate**: Data de vencimento da story
- **dependencies**: Array de IDs de stories dependentes
- **tags**: Array de tags de story

### Document Fields
- **name**: Nome do documento com √≠cone e tipo
- **parent**: Technical Docs List
- **visibility**: "PRIVATE" para documenta√ß√£o interna
- **content**: Conte√∫do de produto em markdown

## Exemplos de Uso

### Criar Epic
```typescript
await createEpicInClickUp({
  name: "Sistema de Autentica√ß√£o",
  description: "Implementar sistema completo de autentica√ß√£o para usu√°rios",
  businessValue: "Permitir acesso seguro e personalizado dos usu√°rios",
  acceptanceCriteria: [
    "Usu√°rios podem fazer login com email/senha",
    "Sistema suporta Google OAuth",
    "Sess√µes s√£o seguras e expiram adequadamente"
  ],
  priority: 1,
  dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
  assignees: ["po123"]
});
```

### Criar Stories para Epic
```typescript
await createStoriesForEpic("epic-123", [
  {
    name: "Login com Email/Senha",
    description: "Implementar autentica√ß√£o b√°sica",
    userStory: "Como usu√°rio, quero fazer login com email e senha para acessar minha conta",
    acceptanceCriteria: [
      "Usu√°rio pode inserir email e senha",
      "Sistema valida credenciais",
      "Usu√°rio √© redirecionado ap√≥s login"
    ],
    priority: 1,
    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
  }
]);
```

### Criar Documenta√ß√£o de Produto
```typescript
await createProductDocument({
  name: "PRD - Sistema de Autentica√ß√£o",
  content: "# PRD - Sistema de Autentica√ß√£o\n\n## Objetivo\nImplementar sistema de autentica√ß√£o seguro...",
  type: 'prd'
});
```

---

**Lembre-se**: Como PO, sempre use ClickUp MCP para criar epics, stories e documenta√ß√£o de produto com foco no valor de neg√≥cio!