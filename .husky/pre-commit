#!/bin/sh
# Pre-commit hook para valida√ß√£o multi-camada

echo "üé≠ BMad Orchestrator - Valida√ß√£o Multi-Camada"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir status
show_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Contador de erros
ERROR_COUNT=0

echo -e "${BLUE}üîç Validando Frontend...${NC}"
echo "   - TypeScript compilation"
npm run typecheck
if [ $? -ne 0 ]; then
    echo -e "${RED}   ‚ùå Erro de compila√ß√£o TypeScript${NC}"
    ERROR_COUNT=$((ERROR_COUNT + 1))
else
    echo -e "${GREEN}   ‚úÖ TypeScript OK${NC}"
fi

echo "   - ESLint validation"
npm run lint
if [ $? -ne 0 ]; then
    echo -e "${RED}   ‚ùå Erro de lint${NC}"
    ERROR_COUNT=$((ERROR_COUNT + 1))
else
    echo -e "${GREEN}   ‚úÖ ESLint OK${NC}"
fi

echo ""
echo -e "${BLUE}üîç Validando Backend...${NC}"
echo "   - TypeScript compilation"
npm run typecheck
if [ $? -ne 0 ]; then
    echo -e "${RED}   ‚ùå Erro de compila√ß√£o TypeScript${NC}"
    ERROR_COUNT=$((ERROR_COUNT + 1))
else
    echo -e "${GREEN}   ‚úÖ TypeScript OK${NC}"
fi

echo "   - API validation"
# Verificar se h√° arquivos de API modificados
API_FILES=$(git diff --cached --name-only | grep -E "src/app/api|src/lib/validation")
if [ -n "$API_FILES" ]; then
    echo "   - Validando schemas de API..."
    npm run test:api-validation 2>/dev/null || echo -e "${YELLOW}   ‚ö†Ô∏è  Testes de API n√£o encontrados${NC}"
fi

echo ""
echo -e "${BLUE}üîç Validando Database...${NC}"
echo "   - Schema validation"
npm run db:validate-schema 2>/dev/null || echo -e "${YELLOW}   ‚ö†Ô∏è  Drizzle Kit n√£o configurado${NC}"

echo "   - Migration validation"
# Verificar se h√° migra√ß√µes modificadas
MIGRATION_FILES=$(git diff --cached --name-only | grep -E "drizzle/.*\.sql")
if [ -n "$MIGRATION_FILES" ]; then
    echo "   - Validando migra√ß√µes..."
    for file in $MIGRATION_FILES; do
        echo "     - $file"
        # Validar sintaxe SQL b√°sica
        if grep -q "CREATE TABLE\|ALTER TABLE\|DROP TABLE" "$file"; then
            echo -e "${GREEN}     ‚úÖ Sintaxe SQL v√°lida${NC}"
        else
            echo -e "${YELLOW}     ‚ö†Ô∏è  Arquivo de migra√ß√£o sem comandos DDL${NC}"
        fi
    done
fi

echo ""
echo -e "${BLUE}üîç Validando Integra√ß√£o Cross-Layer...${NC}"
echo "   - Schema consistency"
# Verificar consist√™ncia entre schemas
if [ -f "src/lib/validation/cross-layer.ts" ]; then
    echo "   - Validando schemas compartilhados..."
    npm run test:cross-layer 2>/dev/null || echo -e "${YELLOW}   ‚ö†Ô∏è  Testes cross-layer n√£o configurados${NC}"
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  Arquivo cross-layer.ts n√£o encontrado${NC}"
fi

echo ""
echo -e "${BLUE}üîç Valida√ß√£o de Seguran√ßa...${NC}"
echo "   - Verificando secrets e tokens"
# Verificar se h√° secrets no c√≥digo
SECRET_FILES=$(git diff --cached --name-only | grep -v ".env" | xargs grep -l "password\|secret\|token\|key" 2>/dev/null || true)
if [ -n "$SECRET_FILES" ]; then
    echo -e "${YELLOW}   ‚ö†Ô∏è  Poss√≠veis secrets encontrados em:${NC}"
    echo "$SECRET_FILES" | while read file; do
        echo -e "${YELLOW}     - $file${NC}"
    done
fi

echo "   - Verificando depend√™ncias vulner√°veis"
npm audit --audit-level=moderate 2>/dev/null || echo -e "${YELLOW}   ‚ö†Ô∏è  npm audit n√£o dispon√≠vel${NC}"

echo ""
echo -e "${BLUE}üîç Valida√ß√£o de Performance...${NC}"
echo "   - Verificando imports desnecess√°rios"
# Verificar imports n√£o utilizados
UNUSED_IMPORTS=$(git diff --cached --name-only | grep -E "\.(ts|tsx)$" | xargs grep -l "import.*from.*'" 2>/dev/null || true)
if [ -n "$UNUSED_IMPORTS" ]; then
    echo -e "${YELLOW}   ‚ö†Ô∏è  Verifique imports n√£o utilizados em:${NC}"
    echo "$UNUSED_IMPORTS" | head -5 | while read file; do
        echo -e "${YELLOW}     - $file${NC}"
    done
fi

echo ""
echo "=============================================="

# Resultado final
if [ $ERROR_COUNT -eq 0 ]; then
    echo -e "${GREEN}üéâ Valida√ß√£o Multi-Camada Conclu√≠da com Sucesso!${NC}"
    echo -e "${GREEN}‚úÖ Todas as camadas foram validadas${NC}"
    echo -e "${GREEN}‚úÖ Commit liberado para prosseguir${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Valida√ß√£o Multi-Camada Falhou!${NC}"
    echo -e "${RED}‚ùå $ERROR_COUNT erro(s) encontrado(s)${NC}"
    echo -e "${RED}‚ùå Commit bloqueado - corrija os erros antes de prosseguir${NC}"
    echo ""
    echo -e "${YELLOW}üí° Dicas para corre√ß√£o:${NC}"
    echo "   1. Execute 'npm run validate:all' para ver detalhes"
    echo "   2. Execute 'npm run typecheck' para erros TypeScript"
    echo "   3. Execute 'npm run lint' para erros de lint"
    echo "   4. Execute 'npm run db:validate-schema' para erros de schema"
    echo ""
    exit 1
fi

