const { createClient } = require("@supabase/supabase-js");
require("dotenv").config({ path: ".env.local" });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkSupabaseOAuthConfig() {
  try {
    console.log("üîç Verificando configura√ß√£o do Google OAuth no Supabase...");

    console.log("üìã Configura√ß√£o:");
    console.log(`  - Supabase URL: ${supabaseUrl}`);
    console.log(
      `  - Service Role Key: ${supabaseKey ? "‚úÖ configurado" : "‚ùå n√£o configurado"}`
    );
    console.log(`  - Google Client ID: ${process.env.GOOGLE_CLIENT_ID}`);
    console.log(
      `  - Google Client Secret: ${process.env.GOOGLE_CLIENT_SECRET ? "‚úÖ configurado" : "‚ùå n√£o configurado"}`
    );

    if (!supabaseKey) {
      console.log(
        "‚ùå Service Role Key n√£o configurado. N√£o √© poss√≠vel verificar a configura√ß√£o do OAuth."
      );
      return;
    }

    // Verificar se conseguimos acessar o Supabase
    console.log("\nüîç Testando acesso ao Supabase...");
    try {
      const { data: session, error: sessionError } =
        await supabase.auth.getSession();
      if (sessionError) {
        console.log("‚ö†Ô∏è Erro ao acessar Supabase:", sessionError.message);
      } else {
        console.log("‚úÖ Acesso ao Supabase OK");
      }
    } catch (error) {
      console.log("‚ùå Erro inesperado ao acessar Supabase:", error.message);
    }

    // Verificar configura√ß√£o do Google OAuth
    console.log("\nüîç Verificando configura√ß√£o do Google OAuth...");

    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: "http://localhost:3000/auth/callback",
        },
      });

      if (error) {
        console.log("‚ùå Erro no OAuth:", error.message);

        if (error.message.includes("redirect_uri_mismatch")) {
          console.log("\nüí° SOLU√á√ÉO:");
          console.log(
            "1. Acesse o Supabase Dashboard: https://supabase.com/dashboard/project/zpdartuyaergbxmbmtur/auth/providers"
          );
          console.log("2. V√° para Authentication > Providers");
          console.log("3. Encontre o Google Provider");
          console.log("4. Verifique se est√° habilitado");
          console.log("5. Configure o Client ID e Secret");
          console.log("6. Adicione os redirect URIs:");
          console.log("   - http://localhost:3000/auth/callback");
          console.log("   - https://falachefe-v4.vercel.app/auth/callback");
        } else if (error.message.includes("Invalid login credentials")) {
          console.log("\nüí° SOLU√á√ÉO:");
          console.log(
            "1. Verifique se o Google OAuth est√° habilitado no Supabase Dashboard"
          );
          console.log("2. Verifique se as credenciais est√£o corretas");
          console.log(
            "3. Verifique se o Client ID e Secret est√£o configurados"
          );
        }
      } else {
        console.log("‚úÖ Google OAuth configurado corretamente no Supabase");
        console.log(`   - URL gerada: ${data.url}`);
      }
    } catch (oauthError) {
      console.log("‚ùå Erro inesperado no OAuth:", oauthError.message);
    }

    console.log("\nüìã CHECKLIST DE CONFIGURA√á√ÉO:");
    console.log("‚úÖ Supabase URL configurado");
    console.log(`${supabaseKey ? "‚úÖ" : "‚ùå"} Service Role Key configurado`);
    console.log(
      `${process.env.GOOGLE_CLIENT_ID ? "‚úÖ" : "‚ùå"} Google Client ID configurado`
    );
    console.log(
      `${process.env.GOOGLE_CLIENT_SECRET ? "‚úÖ" : "‚ùå"} Google Client Secret configurado`
    );
    console.log(
      "‚ùå Google OAuth no Supabase Dashboard (PRECISA SER CONFIGURADO)"
    );

    console.log("\nüîó PR√ìXIMOS PASSOS:");
    console.log(
      "1. Acesse o Supabase Dashboard: https://supabase.com/dashboard/project/zpdartuyaergbxmbmtur/auth/providers"
    );
    console.log("2. V√° para Authentication > Providers");
    console.log("3. Encontre o Google Provider");
    console.log("4. Habilite o Google OAuth");
    console.log("5. Configure:");
    console.log(`   - Client ID: ${process.env.GOOGLE_CLIENT_ID}`);
    console.log(`   - Client Secret: ${process.env.GOOGLE_CLIENT_SECRET}`);
    console.log("6. Adicione os redirect URIs:");
    console.log("   - http://localhost:3000/auth/callback");
    console.log("   - https://falachefe-v4.vercel.app/auth/callback");
    console.log("7. Salve as configura√ß√µes");

    console.log("\nüîó Links √∫teis:");
    console.log(
      `- Supabase Dashboard: https://supabase.com/dashboard/project/zpdartuyaergbxmbmtur/auth/providers`
    );
    console.log(
      `- Google Console: https://console.cloud.google.com/apis/credentials`
    );
    console.log(`- Login Local: http://localhost:3000/auth/signin`);
    console.log(
      `- Login Produ√ß√£o: https://falachefe-v4.vercel.app/auth/signin`
    );
  } catch (error) {
    console.error("‚ùå Erro no teste:", error.message);
  }
}

checkSupabaseOAuthConfig().catch(console.error);
