const { createClient } = require("@supabase/supabase-js");
require("dotenv").config({ path: ".env.local" });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function testUserSync() {
  try {
    console.log("üß™ Testando sistema de sincroniza√ß√£o de usu√°rios...");

    // 1. Verificar status atual
    console.log("\n1Ô∏è‚É£ Verificando status atual...");
    const statusResponse = await fetch(
      `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/api/user-sync`
    );

    if (statusResponse.ok) {
      const status = await statusResponse.json();
      console.log("üìä Status da sincroniza√ß√£o:");
      console.log(`  - Total Auth Users: ${status.data.totalAuthUsers}`);
      console.log(`  - Total DB Users: ${status.data.totalDbUsers}`);
      console.log(`  - √ìrf√£os no Auth: ${status.data.missingInDb.length}`);
      console.log(`  - √ìrf√£os na DB: ${status.data.missingInAuth.length}`);
      console.log(`  - Sincronizado: ${status.data.isSynced ? "Sim" : "N√£o"}`);

      if (status.data.missingInDb.length > 0) {
        console.log("\nüë• Usu√°rios √≥rf√£os no Auth:");
        status.data.missingInDb.forEach((user) => {
          console.log(`  - ${user.email} (${user.id})`);
        });
      }

      if (status.data.missingInAuth.length > 0) {
        console.log("\nüë• Usu√°rios √≥rf√£os na DB:");
        status.data.missingInAuth.forEach((user) => {
          console.log(`  - ${user.email} (${user.id})`);
        });
      }
    } else {
      console.log("‚ùå Erro ao verificar status:", statusResponse.status);
    }

    // 2. Testar sincroniza√ß√£o de usu√°rios √≥rf√£os
    console.log("\n2Ô∏è‚É£ Testando sincroniza√ß√£o de usu√°rios √≥rf√£os...");
    const syncResponse = await fetch(
      `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/api/user-sync`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ action: "sync-orphaned" }),
      }
    );

    if (syncResponse.ok) {
      const syncResult = await syncResponse.json();
      console.log("‚úÖ Sincroniza√ß√£o conclu√≠da:");
      console.log(`  - Usu√°rios sincronizados: ${syncResult.data.synced}`);
      console.log(`  - Usu√°rios removidos: ${syncResult.data.removed}`);
    } else {
      console.log("‚ùå Erro na sincroniza√ß√£o:", syncResponse.status);
    }

    // 3. Verificar status ap√≥s sincroniza√ß√£o
    console.log("\n3Ô∏è‚É£ Verificando status ap√≥s sincroniza√ß√£o...");
    const finalStatusResponse = await fetch(
      `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/api/user-sync`
    );

    if (finalStatusResponse.ok) {
      const finalStatus = await finalStatusResponse.json();
      console.log("üìä Status final:");
      console.log(`  - Total Auth Users: ${finalStatus.data.totalAuthUsers}`);
      console.log(`  - Total DB Users: ${finalStatus.data.totalDbUsers}`);
      console.log(`  - √ìrf√£os no Auth: ${finalStatus.data.missingInDb.length}`);
      console.log(`  - √ìrf√£os na DB: ${finalStatus.data.missingInAuth.length}`);
      console.log(
        `  - Sincronizado: ${finalStatus.data.isSynced ? "Sim" : "N√£o"}`
      );

      if (finalStatus.data.isSynced) {
        console.log(
          "\nüéâ Sincroniza√ß√£o perfeita! Todos os usu√°rios est√£o sincronizados."
        );
      } else {
        console.log("\n‚ö†Ô∏è Ainda h√° usu√°rios √≥rf√£os. Verifique a configura√ß√£o.");
      }
    }

    // 4. Testar cria√ß√£o de usu√°rio
    console.log("\n4Ô∏è‚É£ Testando cria√ß√£o de usu√°rio...");
    const testEmail = `teste_sync_${Date.now()}@example.com`;
    const testPassword = "123456";

    const { data: signupData, error: signupError } = await supabase.auth.signUp(
      {
        email: testEmail,
        password: testPassword,
      }
    );

    if (signupError) {
      console.log("‚ùå Erro ao criar usu√°rio de teste:", signupError.message);
    } else {
      console.log("‚úÖ Usu√°rio de teste criado:", signupData.user?.email);

      // Aguardar um momento para o webhook processar
      console.log("‚è≥ Aguardando processamento do webhook...");
      await new Promise((resolve) => setTimeout(resolve, 3000));

      // Verificar se foi sincronizado
      const { data: dbUsers, error: dbError } = await supabase
        .from("user")
        .select("*")
        .eq("email", testEmail);

      if (dbError) {
        console.log("‚ùå Erro ao verificar usu√°rio na DB:", dbError.message);
      } else if (dbUsers.length > 0) {
        console.log("‚úÖ Usu√°rio foi sincronizado automaticamente!");
        console.log(`  - ID: ${dbUsers[0].id}`);
        console.log(`  - Nome: ${dbUsers[0].name}`);
        console.log(`  - Email: ${dbUsers[0].email}`);
      } else {
        console.log("‚ö†Ô∏è Usu√°rio n√£o foi sincronizado automaticamente");
      }

      // Limpar usu√°rio de teste
      console.log("\nüßπ Limpando usu√°rio de teste...");
      if (signupData.user?.id) {
        await supabase.auth.admin.deleteUser(signupData.user.id);
        console.log("‚úÖ Usu√°rio de teste removido");
      }
    }

    console.log("\n‚úÖ Teste de sincroniza√ß√£o conclu√≠do!");
  } catch (error) {
    console.error("‚ùå Erro no teste:", error.message);
  }
}

testUserSync().catch(console.error);
