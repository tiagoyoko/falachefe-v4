import { db } from "@/lib/db";
import { categories } from "@/lib/schema";
import { eq, and } from "drizzle-orm";
import { nanoid } from "nanoid";

export interface CategorizationResult {
  suggestedCategoryId: string | null;
  suggestedCategoryName: string | null;
  confidence: number;
  reasoning: string;
}

export interface CategorySuggestion {
  id: string;
  name: string;
  type: "receita" | "despesa";
  color: string;
  confidence: number;
}

export class CategorizationService {
  private static instance: CategorizationService;

  public static getInstance(): CategorizationService {
    if (!CategorizationService.instance) {
      CategorizationService.instance = new CategorizationService();
    }
    return CategorizationService.instance;
  }

  /**
   * Categoriza automaticamente uma transa√ß√£o baseada na descri√ß√£o
   */
  async categorizeTransaction(
    userId: string,
    description: string,
    type: "receita" | "despesa",
    amount?: number
  ): Promise<CategorizationResult> {
    try {
      // Buscar categorias existentes do usu√°rio
      const userCategories = await db
        .select()
        .from(categories)
        .where(
          and(
            eq(categories.userId, userId),
            eq(categories.type, type),
            eq(categories.isActive, true)
          )
        );

      if (userCategories.length === 0) {
        console.log(
          `üîß Usu√°rio ${userId} n√£o tem categorias. Criando categorias padr√£o...`
        );
        // Criar categorias padr√£o se n√£o existirem
        await this.createDefaultCategories(userId);

        // Buscar novamente as categorias
        const newUserCategories = await db
          .select()
          .from(categories)
          .where(
            and(
              eq(categories.userId, userId),
              eq(categories.type, type),
              eq(categories.isActive, true)
            )
          );

        if (newUserCategories.length === 0) {
          return {
            suggestedCategoryId: null,
            suggestedCategoryName: null,
            confidence: 0,
            reasoning: "N√£o foi poss√≠vel criar categorias padr√£o",
          };
        }

        // Usar as novas categorias
        const suggestion = await this.suggestCategoryWithLLM(
          description,
          type,
          newUserCategories.map((cat) => ({
            id: cat.id,
            name: cat.name,
            type: cat.type,
            color: cat.color || undefined,
          })),
          amount
        );

        return suggestion;
      }

      // Usar LLM para categorizar
      const suggestion = await this.suggestCategoryWithLLM(
        description,
        type,
        userCategories.map((cat) => ({
          id: cat.id,
          name: cat.name,
          type: cat.type,
          color: cat.color || undefined,
        })),
        amount
      );

      return suggestion;
    } catch (error) {
      console.error("Erro ao categorizar transa√ß√£o:", error);
      console.error(
        "Stack trace:",
        error instanceof Error ? error.stack : "No stack trace"
      );
      return {
        suggestedCategoryId: null,
        suggestedCategoryName: null,
        confidence: 0,
        reasoning: `Erro interno na categoriza√ß√£o: ${
          error instanceof Error ? error.message : "Erro desconhecido"
        }`,
      };
    }
  }

  /**
   * Sugere categorias baseadas na descri√ß√£o usando LLM
   */
  async suggestCategories(
    userId: string,
    description: string,
    type: "receita" | "despesa",
    amount?: number
  ): Promise<CategorySuggestion[]> {
    try {
      // Buscar categorias existentes do usu√°rio
      const userCategories = await db
        .select()
        .from(categories)
        .where(
          and(
            eq(categories.userId, userId),
            eq(categories.type, type),
            eq(categories.isActive, true)
          )
        );

      if (userCategories.length === 0) {
        return [];
      }

      // Usar LLM para sugerir m√∫ltiplas categorias
      const suggestions = await this.suggestMultipleCategoriesWithLLM(
        description,
        type,
        userCategories.map((cat) => ({
          id: cat.id,
          name: cat.name,
          type: cat.type,
          color: cat.color || undefined,
        })),
        amount
      );

      return suggestions;
    } catch (error) {
      console.error("Erro ao sugerir categorias:", error);
      return [];
    }
  }

  /**
   * Atualiza a categoria de uma transa√ß√£o baseada no comando do usu√°rio
   */
  async updateTransactionCategory(
    userId: string,
    transactionId: string,
    newCategoryId: string
  ): Promise<{ success: boolean; message: string }> {
    try {
      // Verificar se a categoria pertence ao usu√°rio
      const category = await db
        .select()
        .from(categories)
        .where(
          and(
            eq(categories.id, newCategoryId),
            eq(categories.userId, userId),
            eq(categories.isActive, true)
          )
        )
        .limit(1);

      if (category.length === 0) {
        return {
          success: false,
          message: "Categoria n√£o encontrada ou n√£o pertence ao usu√°rio",
        };
      }

      // Atualizar a transa√ß√£o (isso seria feito no endpoint de transa√ß√µes)
      return {
        success: true,
        message: "Categoria atualizada com sucesso",
      };
    } catch (error) {
      console.error("Erro ao atualizar categoria da transa√ß√£o:", error);
      return {
        success: false,
        message: "Erro interno do servidor",
      };
    }
  }

  /**
   * Usa LLM para sugerir uma categoria baseada na descri√ß√£o
   */
  private async suggestCategoryWithLLM(
    description: string,
    type: "receita" | "despesa",
    availableCategories: Array<{
      id: string;
      name: string;
      type: string;
      color?: string;
    }>,
    amount?: number
  ): Promise<CategorizationResult> {
    try {
      // Preparar contexto para o LLM
      const categoriesList = availableCategories
        .map((cat) => `- ${cat.name} (ID: ${cat.id})`)
        .join("\n");

      const prompt = `
Analise a seguinte transa√ß√£o financeira e sugira a categoria mais apropriada:

Tipo: ${type}
Descri√ß√£o: "${description}"
${amount ? `Valor: R$ ${amount.toFixed(2)}` : ""}

Categorias dispon√≠veis:
${categoriesList}

Responda APENAS com um JSON no seguinte formato:
{
  "suggestedCategoryId": "ID_DA_CATEGORIA_MAIS_APROPRIADA",
  "suggestedCategoryName": "NOME_DA_CATEGORIA",
  "confidence": 0.95,
  "reasoning": "Explica√ß√£o breve do porqu√™ esta categoria foi escolhida"
}

Se nenhuma categoria for apropriada, use:
{
  "suggestedCategoryId": null,
  "suggestedCategoryName": null,
  "confidence": 0,
  "reasoning": "Nenhuma categoria existente √© apropriada para esta transa√ß√£o"
}
`;

      // Simular processamento LLM (aqui voc√™ integraria com OpenAI, Claude, etc.)
      const response = (await this.processWithLLM(
        prompt
      )) as CategorizationResult;

      return response;
    } catch (error) {
      console.error("Erro no processamento LLM:", error);
      return {
        suggestedCategoryId: null,
        suggestedCategoryName: null,
        confidence: 0,
        reasoning: "Erro no processamento de IA",
      };
    }
  }

  /**
   * Usa LLM para sugerir m√∫ltiplas categorias
   */
  private async suggestMultipleCategoriesWithLLM(
    description: string,
    type: "receita" | "despesa",
    availableCategories: Array<{
      id: string;
      name: string;
      type: string;
      color?: string;
    }>,
    amount?: number
  ): Promise<CategorySuggestion[]> {
    try {
      const categoriesList = availableCategories
        .map((cat) => `- ${cat.name} (ID: ${cat.id})`)
        .join("\n");

      const prompt = `
Analise a seguinte transa√ß√£o financeira e sugira as 3 categorias mais apropriadas em ordem de relev√¢ncia:

Tipo: ${type}
Descri√ß√£o: "${description}"
${amount ? `Valor: R$ ${amount.toFixed(2)}` : ""}

Categorias dispon√≠veis:
${categoriesList}

Responda APENAS com um JSON no seguinte formato:
[
  {
    "id": "ID_DA_CATEGORIA",
    "name": "NOME_DA_CATEGORIA",
    "type": "${type}",
    "color": "#COR_DA_CATEGORIA",
    "confidence": 0.95
  }
]
`;

      const response = (await this.processWithLLM(
        prompt
      )) as CategorySuggestion[];
      return response;
    } catch (error) {
      console.error("Erro no processamento LLM:", error);
      return [];
    }
  }

  /**
   * Processa prompt com LLM (implementa√ß√£o b√°sica)
   * Aqui voc√™ integraria com OpenAI, Claude, ou outro servi√ßo de IA
   */
  private async processWithLLM(
    prompt: string
  ): Promise<CategorizationResult | CategorySuggestion[]> {
    // Implementa√ß√£o b√°sica usando regras simples
    // Em produ√ß√£o, substitua por chamada real para LLM

    // Simular delay de processamento
    await new Promise((resolve) => setTimeout(resolve, 100));

    // L√≥gica simples de categoriza√ß√£o baseada em palavras-chave
    const description = prompt.match(/Descri√ß√£o: "(.+?)"/)?.[1] || "";

    // Extrair categorias dispon√≠veis do prompt
    const categoriesMatch = prompt.match(
      /Categorias dispon√≠veis:\n([\s\S]+?)(?=\n\n|$)/
    );
    const categoriesText = categoriesMatch?.[1] || "";
    const availableCategories = categoriesText
      .split("\n")
      .filter((line) => line.includes("(ID:"))
      .map((line) => {
        const nameMatch = line.match(/- (.+?) \(ID: (.+?)\)/);
        return nameMatch ? { name: nameMatch[1], id: nameMatch[2] } : null;
      })
      .filter(Boolean);

    // L√≥gica de categoriza√ß√£o simples
    const lowerDesc = description.toLowerCase();

    // Palavras-chave para diferentes tipos de categorias
    const keywords: Record<string, string[]> = {
      vendas: ["venda", "vendas", "cliente", "produto", "mercadoria"],
      servi√ßos: [
        "servi√ßo",
        "servi√ßos",
        "consultoria",
        "atendimento",
        "suporte",
      ],
      fornecedores: [
        "fornecedor",
        "fornecedores",
        "compra",
        "mat√©ria-prima",
        "insumo",
      ],
      marketing: [
        "marketing",
        "publicidade",
        "propaganda",
        "an√∫ncio",
        "campanha",
      ],
      operacionais: [
        "operacional",
        "opera√ß√£o",
        "manuten√ß√£o",
        "reparo",
        "equipamento",
      ],
      combust√≠vel: [
        "combust√≠vel",
        "gasolina",
        "diesel",
        "posto",
        "abastecimento",
      ],
      alimenta√ß√£o: [
        "alimenta√ß√£o",
        "comida",
        "restaurante",
        "lanche",
        "refei√ß√£o",
      ],
      transporte: ["transporte", "uber", "taxi", "√¥nibus", "passagem"],
      telefone: ["telefone", "celular", "internet", "dados", "plano"],
      energia: ["energia", "luz", "eletricidade", "conta de luz"],
      √°gua: ["√°gua", "saneamento", "conta de √°gua"],
      aluguel: ["aluguel", "loca√ß√£o", "im√≥vel", "escrit√≥rio"],
    };

    // Encontrar categoria mais prov√°vel
    let bestMatch = null;
    let bestScore = 0;

    for (const [categoryName, words] of Object.entries(keywords)) {
      const score = words.reduce((acc, word) => {
        return acc + (lowerDesc.includes(word) ? 1 : 0);
      }, 0);

      if (score > bestScore) {
        bestScore = score;
        bestMatch = categoryName;
      }
    }

    // Encontrar categoria correspondente nas categorias dispon√≠veis
    const matchingCategory = availableCategories.find(
      (cat) =>
        (cat && cat.name.toLowerCase().includes(bestMatch || "")) ||
        bestMatch?.includes(cat?.name.toLowerCase() || "")
    );

    if (matchingCategory && bestScore > 0) {
      return {
        suggestedCategoryId: matchingCategory.id,
        suggestedCategoryName: matchingCategory.name,
        confidence: Math.min(bestScore / 3, 1), // Normalizar confian√ßa
        reasoning: `Categoria sugerida baseada nas palavras-chave: "${bestMatch}"`,
      };
    }

    // Se n√£o encontrar correspond√™ncia, retornar primeira categoria dispon√≠vel
    if (availableCategories.length > 0 && availableCategories[0]) {
      return {
        suggestedCategoryId: availableCategories[0].id,
        suggestedCategoryName: availableCategories[0].name,
        confidence: 0.3,
        reasoning: "Categoria sugerida como fallback (primeira dispon√≠vel)",
      };
    }

    return {
      suggestedCategoryId: null,
      suggestedCategoryName: null,
      confidence: 0,
      reasoning: "Nenhuma categoria apropriada encontrada",
    };
  }

  /**
   * Criar categorias padr√£o para um usu√°rio
   */
  private async createDefaultCategories(userId: string): Promise<void> {
    try {
      const defaultCategories = [
        // Categorias de Receita
        { name: "Vendas", type: "receita" as const, color: "#10b981" },
        { name: "Servi√ßos", type: "receita" as const, color: "#3b82f6" },
        { name: "Outras Receitas", type: "receita" as const, color: "#8b5cf6" },

        // Categorias de Despesa
        { name: "Fornecedores", type: "despesa" as const, color: "#ef4444" },
        { name: "Marketing", type: "despesa" as const, color: "#f59e0b" },
        { name: "Operacionais", type: "despesa" as const, color: "#8b5cf6" },
        { name: "Combust√≠vel", type: "despesa" as const, color: "#06b6d4" },
        { name: "Alimenta√ß√£o", type: "despesa" as const, color: "#84cc16" },
        { name: "Transporte", type: "despesa" as const, color: "#f97316" },
        { name: "Telefone", type: "despesa" as const, color: "#ec4899" },
        { name: "Energia", type: "despesa" as const, color: "#eab308" },
        { name: "√Ågua", type: "despesa" as const, color: "#06b6d4" },
        { name: "Aluguel", type: "despesa" as const, color: "#8b5cf6" },
        { name: "Outras Despesas", type: "despesa" as const, color: "#6b7280" },
      ];

      for (const categoryData of defaultCategories) {
        await db.insert(categories).values({
          id: nanoid(),
          userId,
          name: categoryData.name,
          type: categoryData.type,
          color: categoryData.color,
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date(),
        });
      }

      console.log(
        `‚úÖ Criadas ${defaultCategories.length} categorias padr√£o para usu√°rio ${userId}`
      );
    } catch (error) {
      console.error("Erro ao criar categorias padr√£o:", error);
      throw error;
    }
  }
}

export const categorizationService = CategorizationService.getInstance();
