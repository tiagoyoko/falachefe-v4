import { createClient } from "@/lib/supabase-server";
import { db } from "@/lib/db";
import { user } from "@/lib/schema";
import { eq } from "drizzle-orm";

// Fun√ß√£o para obter cliente Supabase
async function getSupabaseClient() {
  return await createClient();
}

interface AuthUser {
  id: string;
  email?: string;
  user_metadata?: {
    name?: string;
    avatar_url?: string;
    picture?: string;
  };
  email_confirmed_at?: string;
  created_at: string;
}

interface DbUser {
  id: string;
  email: string;
  name: string;
  role: string;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  emailVerified?: boolean;
  image?: string | null;
}

/**
 * Sincroniza usu√°rio do Supabase Auth para nossa tabela user
 */
export async function syncUserFromAuth(authUser: AuthUser) {
  try {
    if (!authUser.email) {
      throw new Error("Email do usu√°rio √© obrigat√≥rio");
    }

    console.log("üîÑ Sincronizando usu√°rio do Auth:", authUser.email);

    // Verificar se j√° existe na nossa tabela
    const existingUser = await db
      .select()
      .from(user)
      .where(eq(user.id, authUser.id))
      .limit(1);

    const userData = {
      id: authUser.id,
      name:
        authUser.user_metadata?.name ||
        authUser.email?.split("@")[0] ||
        "Usu√°rio",
      email: authUser.email,
      emailVerified: !!authUser.email_confirmed_at,
      image:
        authUser.user_metadata?.avatar_url ||
        authUser.user_metadata?.picture ||
        null,
      role: "user" as const,
      isActive: true,
      createdAt: new Date(authUser.created_at),
      updatedAt: new Date(),
    };

    if (existingUser.length > 0) {
      // Atualizar usu√°rio existente
      await db
        .update(user)
        .set({
          name: userData.name,
          email: userData.email,
          emailVerified: userData.emailVerified,
          image: userData.image,
          updatedAt: userData.updatedAt,
        })
        .where(eq(user.id, authUser.id));

      console.log("‚úÖ Usu√°rio atualizado na tabela user");
    } else {
      // Criar novo usu√°rio
      await db.insert(user).values(userData);
      console.log("‚úÖ Novo usu√°rio criado na tabela user");
    }

    return { success: true, user: userData };
  } catch (error) {
    console.error("‚ùå Erro ao sincronizar usu√°rio do Auth:", error);
    throw error;
  }
}

/**
 * Sincroniza usu√°rio da nossa tabela para o Supabase Auth
 */
export async function syncUserToAuth(userId: string) {
  try {
    console.log("üîÑ Sincronizando usu√°rio para Auth:", userId);

    // Buscar usu√°rio na nossa tabela
    const [dbUser] = await db
      .select()
      .from(user)
      .where(eq(user.id, userId))
      .limit(1);

    if (!dbUser) {
      throw new Error("Usu√°rio n√£o encontrado na tabela user");
    }

    // Atualizar usu√°rio no Supabase Auth
    const supabase = await getSupabaseClient();
    const { error } = await supabase.auth.admin.updateUserById(userId, {
      email: dbUser.email,
      user_metadata: {
        name: dbUser.name,
        avatar_url: dbUser.image,
      },
    });

    if (error) {
      throw new Error(`Erro ao atualizar usu√°rio no Auth: ${error.message}`);
    }

    console.log("‚úÖ Usu√°rio atualizado no Supabase Auth");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Erro ao sincronizar usu√°rio para Auth:", error);
    throw error;
  }
}

/**
 * Remove usu√°rio da nossa tabela
 */
export async function removeUserFromTable(userId: string) {
  try {
    console.log("üóëÔ∏è Removendo usu√°rio da tabela user:", userId);

    await db.delete(user).where(eq(user.id, userId));

    console.log("‚úÖ Usu√°rio removido da tabela user");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Erro ao remover usu√°rio da tabela:", error);
    throw error;
  }
}

/**
 * Remove usu√°rio do Supabase Auth
 */
export async function removeUserFromAuth(userId: string) {
  try {
    console.log("üóëÔ∏è Removendo usu√°rio do Supabase Auth:", userId);

    const supabase = await getSupabaseClient();
    const { error } = await supabase.auth.admin.deleteUser(userId);

    if (error) {
      throw new Error(`Erro ao remover usu√°rio do Auth: ${error.message}`);
    }

    console.log("‚úÖ Usu√°rio removido do Supabase Auth");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Erro ao remover usu√°rio do Auth:", error);
    throw error;
  }
}

/**
 * Sincroniza todos os usu√°rios √≥rf√£os
 */
export async function syncOrphanedUsers() {
  try {
    console.log("üîÑ Sincronizando usu√°rios √≥rf√£os...");

    // Buscar todos os usu√°rios do Supabase Auth
    const supabase = await getSupabaseClient();
    const { data: authUsers, error: authError } =
      await supabase.auth.admin.listUsers();

    if (authError) {
      throw new Error(`Erro ao listar usu√°rios do Auth: ${authError.message}`);
    }

    // Buscar todos os usu√°rios da nossa tabela
    const dbUsers = await db.select().from(user);

    const authUserIds = authUsers.users.map((u: AuthUser) => u.id);
    const dbUserIds = dbUsers.map((u) => u.id);

    // Usu√°rios no Auth mas n√£o na nossa tabela
    const missingInDb = authUsers.users.filter(
      (u: AuthUser) => !dbUserIds.includes(u.id)
    );

    // Usu√°rios na nossa tabela mas n√£o no Auth
    const missingInAuth = dbUsers.filter(
      (u: DbUser) => !authUserIds.includes(u.id)
    );

    console.log(`üìä Usu√°rios √≥rf√£os encontrados:`);
    console.log(`  - No Auth mas n√£o na tabela: ${missingInDb.length}`);
    console.log(`  - Na tabela mas n√£o no Auth: ${missingInAuth.length}`);

    // Sincronizar usu√°rios do Auth para nossa tabela
    for (const authUser of missingInDb) {
      try {
        await syncUserFromAuth(authUser);
      } catch (error) {
        console.error(`‚ùå Erro ao sincronizar ${authUser.email}:`, error);
      }
    }

    // Remover usu√°rios √≥rf√£os da nossa tabela (que n√£o existem no Auth)
    for (const dbUser of missingInAuth) {
      try {
        await removeUserFromTable(dbUser.id);
        console.log(`‚úÖ Usu√°rio √≥rf√£o removido: ${dbUser.email}`);
      } catch (error) {
        console.error(
          `‚ùå Erro ao remover usu√°rio √≥rf√£o ${dbUser.email}:`,
          error
        );
      }
    }

    return {
      success: true,
      synced: missingInDb.length,
      removed: missingInAuth.length,
    };
  } catch (error) {
    console.error("‚ùå Erro ao sincronizar usu√°rios √≥rf√£os:", error);
    throw error;
  }
}

/**
 * Verifica status da sincroniza√ß√£o
 */
export async function getSyncStatus() {
  try {
    // Buscar todos os usu√°rios do Supabase Auth
    const supabase = await getSupabaseClient();
    const { data: authUsers, error: authError } =
      await supabase.auth.admin.listUsers();

    if (authError) {
      throw new Error(`Erro ao listar usu√°rios do Auth: ${authError.message}`);
    }

    // Buscar todos os usu√°rios da nossa tabela
    const dbUsers = await db.select().from(user);

    const authUserIds = authUsers.users.map((u: AuthUser) => u.id);
    const dbUserIds = dbUsers.map((u) => u.id);

    // Usu√°rios no Auth mas n√£o na nossa tabela
    const missingInDb = authUsers.users.filter(
      (u: AuthUser) => !dbUserIds.includes(u.id)
    );

    // Usu√°rios na nossa tabela mas n√£o no Auth
    const missingInAuth = dbUsers.filter(
      (u: DbUser) => !authUserIds.includes(u.id)
    );

    return {
      totalAuthUsers: authUsers.users.length,
      totalDbUsers: dbUsers.length,
      missingInDb: missingInDb.map((u: AuthUser) => ({
        id: u.id,
        email: u.email || "",
      })),
      missingInAuth: missingInAuth.map((u: DbUser) => ({
        id: u.id,
        email: u.email,
      })),
      isSynced: missingInDb.length === 0 && missingInAuth.length === 0,
    };
  } catch (error) {
    console.error("‚ùå Erro ao verificar status da sincroniza√ß√£o:", error);
    throw error;
  }
}
